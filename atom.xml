<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[a 'we'blog]]></title>
  <link href="http://kyle-dorman.github.io/atom.xml" rel="self"/>
  <link href="http://kyle-dorman.github.io/"/>
  <updated>2013-10-21T13:31:43-04:00</updated>
  <id>http://kyle-dorman.github.io/</id>
  <author>
    <name><![CDATA[Kyle Dorman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Internet. What it is, where it comes from, and where its going]]></title>
    <link href="http://kyle-dorman.github.io/blog/2013/10/15/the-internet/"/>
    <updated>2013-10-15T09:42:00-04:00</updated>
    <id>http://kyle-dorman.github.io/blog/2013/10/15/the-internet</id>
    <content type="html"><![CDATA[<p>A few weeks ago Nimit did a presentation on &lsquo;The Internet&rsquo;. All of it. I&rsquo;ve been meaning to blog about it since then as a way to internalize everything we went over but have been puting it off because I hate writing. But yesterday, David&rsquo;s friend and fellow programmer, Andy Brett, came to FullStack and spoke about many topics including coding interviews. He mentioned one of his favorite questions to ask an interview-ie was how the internet works. After today you and I will both be able to fully answer that question.</p>

<p><a href="https://www.youtube.com/watch?v=xSLlZh9yelk"><img src="http://sequart.org/images/Dark-Knight-Shooting-Joker-Severed-Head-Card-Illuminati1.jpg" alt="Begin" /></a></p>

<p>the internet is a big network of servers. Servers are computers that many people can access at a time and responce to internet requests.</p>

<p>URL: A url has five parts. Ex: <a href="http://sports.yahoo.com/nhl">http://sports.yahoo.com/nhl</a>
The first part of this URL is the transfer protocol. More on this later. the &lsquo;sports&rsquo; part is a sub-domain. These go before the domain name and are free. I believe they have become more popular recently. &lsquo;yahoo&rsquo; is the domain name. Great name! Domain names cost money. You can rent or buy them from sites like godaddy.com. The &lsquo;com&rsquo; is the top level domain. There are a ton of top level domains but com is by far the most popular. The coolest top level domain out there right now is io which stands for indian ocean. It makes me think of the iphone for some reason. probalby from ios. &lsquo;/nhl&rsquo; is the sub-directory or file. This part of the url, like the sub-domain, is free. This is where all the routing parts of a url will go.</p>

<p>A request: What happens when we type google.com into the browser url? The browser first resolves the host-name by making a DNS request over TCP/IP. We&rsquo;ll be coming back to TCP/IP. DNS stands for Domain Name System. This set of servers is responsible for translating web addresses into ip addresses. There are a few steps in this process. When you make a request, your browser first checks your local cache for the IP address. The IP address of websites you visit often are ctored on your computer so you don&rsquo;t even have to make a DNS lookup request. Small things like this can make web brosing faster. If you do not have the site cached on your box, your browser will send a request to the local DNS server. Local here means exactly what you think it means, the server closest to your current location. So your DNS server will change as you change locations. This DNS server, like your browser, has a chache of web addresses and ip addresses. This cache is much larger then your local box cache. If the sever has the ip address it sends the address back to your browser. If the DNS server does not have your request, it becomes a DNS client and requess the IP address from other DNS servers. this is a recursive process and will continue up the DNS heirarchy until the request reaches one of the 13 &lsquo;root&rsquo; servers. These servers maintain the entier database of web addresses and thier ip addresses. 10 of these are located in the US, one in Japan, one in London, and one in Sweden. Kind of a big deal. Anyways, back to our request. If out request is not found on any lower level DNS server, the request goes to the root server. The root server will send back the ip address through the chain of DNS servers, if it has one, to your browser. This all happens at crazy fast speeds and that was only the first step of the process. We haven&rsquo;t even requested anydata from the website we are actually intereted in. But now that we have an ip address, we can make that request. The most common request is a GET request. This means we are only asking for data from the server, not sending any to the server. This GET request travels to your ISP (internet sevice provider, e.g. Time Warner, Verizon) your ISP will basically send this message along until it reaches the correct server. Your request can travel all around the country looking for the correct server. Generally servers will know a little more about where the IP address is than the previous server and will route the request as efficiently as it knows how to. There servers are different than the web server we are trying to reach. They are only trying to route internet traffic. These servers are owned by ISPs. ISPs allow traffic to pass between thier servers without much retriction. This has allowed the internt to become much faster. Eventaully (and when I say eventually, I mean within a second and probably closer to 200 miliseconds) our GET request will reach the correct server. Here, the server will take the HTTP verb, ours is GET, and the url, process the request and return data to your browser. This is just an overview of a request but there is definitly alot more depth than what I described here.</p>

<p>Fun things to do to learn more about the internet: open a command prompt, terminal, ect, and type in nslookup google.com. This returns your IP address and google&rsquo;s IP addresses. Your box has an internal IP address addigned by the router you are currently using. This router also has an IP address. This IP address is an external IP address and is used so web servers know where to send information to. You can find out your router&rsquo;s ip address by going to google and typing, whats my ip address. Thanks google! Other fun things, in the terminal type traceroute goggle.com. This shows you the IP address of where your request goes and the time it takes to get to the next server. Very interesting. Type ping yahoo.com in the terminal. This will continually ping yahoo.com to see how long it takes to recueve a response from thier servers. Press ctrl C to end the request cycle. Once ended, ping will also tell you an average amount of time to took to poing the server. One more fun one. Type whois kyledorman.com. Boooom! Its me. Who is will give you a bunch of information about the person, or organization who is currently using the web address. You can see that they messed mine up and put my state as NOrth Carolina not New York. Oh well. Some companies will pay to have this information hidden but I left it up there. Its kind fo fun. If you want to see some weird stuff type out whatis google.com. People have tacked thier websites to the end of google somehow so they also whow up ont he whois list.</p>

<p>IP/TCP: IP stands for Internet Protocol, TCP for Transmission Control Protocol. IP is hte principal communications protocol for the internet for relaying data across netowrk boundires. It is tasked with delivering packets of data from the cource host to the destiniation host based on IP addresses in the packet headers. IP uses n end to end principle in its design. This basically means the internet is assumed to be unreliable at any one point so most error-checking takes place the end points of the process. For our purposes this means our computer and the web server. There is a ton more I could learn about this subject but for now I will let it be. One last note, MTU stands for maximum transmission unit and is the max size one packet of data can be. When google first started out, in 1998, its search page fit entirly in one packet, i.e. it was one MTU in size, meaning it would load very quickly. They don&rsquo;t do this anymore. Too much information to send out But it would be fun if they reverted to this for a dey or two some time.</p>

<p>Webserver: Above I explained a web request and talked briefly about web servers but there is much more to a web server than simply serving a web request (Server: a computer tha &lsquo;serves&rsquo; web requests, ohhhhhh). A web server using runs a UNIX OS or Windows Server. Web servers respond to HTTP requests. There are ~20 HTTP verbs but the most common 4 are GET, POST, PUT, and DELETE. The HTTP verb and the route you are requesting will tell the web server what exactly you want the web server to do. As I said above, the web server serves lots of GET requests for viewing a page but will also serve many PUT and POST requests for adding content to pages. PUT requests are great because they will only be sent once no matter how many times you click enter or click a button. But they are not well supported by servers, so rails emulated PUT requests using POST. I don&rsquo;t have too much more on that for now. Often times DELETE is also emulated using a POST request. To some extent I think Rails is trying to use more HTTP verbs not less.</p>

<p>Lastly, response codes. When a web srever sends a response to our request, it includes a response code that tell sus the result of the request. Codes in the 200s indicate success. Codes in the 300s indicate redirection. Codes in the 400s indicate and error of some kind. I&rsquo;ve been seeing alot of those latly. Whomp.</p>

<p>Ok so thats the internet in a nut shell. I wanted to spend more time talking about the history of the internet and where I think its headed but this turned out to be quite meaty on its own. Let me know if you have any questions.</p>

<p>Fast and Firm,
Kyle (KED)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[week 4, one third complete]]></title>
    <link href="http://kyle-dorman.github.io/blog/2013/10/11/week-4/"/>
    <updated>2013-10-11T12:01:00-04:00</updated>
    <id>http://kyle-dorman.github.io/blog/2013/10/11/week-4</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>i &#8216;git&#8217; code - octocat.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;its a rails new day&quot;</span> <span class="k">unless</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Week 4!</p>

<p>This week we did two rails projects. These were full on rails projects. I definitly benefited from having done a little rails in the past. Mostly I was use to the file setup in the left hand nav of sublime. We first made a linker app which allows you to forward one web address to a longer web address. Becasue twitter only allows post to have 140 characters, linker apps have become really popular for people posting on twitter. At one point there was a fewar that the internet could be crippled if the linkker apps went down. There could basically be a bunch of dead links all over the internet which people rely on to get to thier favourite sites/pages. The linker app helped me get my rails confidence up as I worked through making views and controllers and models. We then built a new and improved stackworld. This was a great project for me. I learned alot. Jorge and I made ours really customized. We put the item creation and connection creation in the left hand nav of our room pages. This was cool because I had to think about what a controller and view really are doing instead of just one to one connecting a controller method to a view. I also learned more about powerful rails methods line has_many and form_for and others. I really wanted to try getting pusher to work. We put some architexture together to let it integreate but sort of ran out of time. Probably better to just keep moving. I again feel that we have fallen behind. I thought we would start the large group mock-kickstarter project this week but we will just end up taking a test and starting next week. Oh ya we have a test. The test is a review of the first 3 weeks. I think I will be fine for it but do want to revuew the action controller stuff. I think my confidence in my sql skills was too high and as a result I didn&rsquo;t learn everything for the action controller stuff. Mostly syntax stuff. Conceptually I think I&rsquo;m fine. Byt there is no teason not to reuvuw this stuff a little.</p>

<p>Other stuff. I&rsquo;m thinking about doing a hackathon on the 19th. Its a mobile payments hackathon. I&rsquo;m thinking I could build something that will allow people to incorporate payments into a google form. I&rsquo;d love to crush that and really get my name out there ya know?</p>

<p>Ok thats all I&rsquo;ve got.</p>

<p>Cheers,
Kyle</p>

<p>P.S. get on my ass about this internet explanation we&#8217;blog&#8217; post. It will be good for both of us.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[week 3 in review]]></title>
    <link href="http://kyle-dorman.github.io/blog/2013/10/04/week-3-in-review/"/>
    <updated>2013-10-04T09:16:00-04:00</updated>
    <id>http://kyle-dorman.github.io/blog/2013/10/04/week-3-in-review</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>pie_in_the_sky - api.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;a website I will build today&quot;</span> <span class="k">unless</span> <span class="n">web_crawlers</span>
</span></code></pre></td></tr></table></div></figure>


<p>Week 3!</p>

<p>Hello World. Week 3 is almost over. During the week it felt like we were moving slowly but now that I&rsquo;m reflecting on what I learned, it feels like a lot. Monday we practiced designing a database for different website. That was a really fun exercise for me. I have a really easy time understanding how different tables connect together. We then moved on to ActiveRecord. ActiveRecord is a gem that amount other things communicated between ruby and sql. Basically it takes in ruby code and converts it to sql select, update, ect. statements. This is really useful because it allows developers to work in ruby and rails (ActiveRecord is included in rails) while trying to fetch data fro the database. I struggled with this a little because SQL has become so intuitive to me and ActiveRecord required a weird SQL-Ruby combo syntax which I wasn&rsquo;t use to. Not too big of a deal though, for the most part I will always know what SQL statement I want and can work backwards to get the ruby/ActiveRecord statement I need. After this we worked on connecting tables with ActiveRecord. Also very useful. There were a few funky relationships which I could conceptually understand but transforming that into ruby/ActiveRecord felt a little funny.</p>

<p>On Wednesday we started working with Sinatra. Sinatra is basically Rails-lite. It works with ActiveRecord but doesn&rsquo;t have all the ActionController stuff. This was great for two reasons. 1. It makes Sinatra smaller and easier to use on smaller projects which require less pages. 2. It was a great to learn Routes.
Routes, in my words, are the combination or HTTP requests and web addresses which tell a web server what a user wants to do. When you visit a websites homepage you are probably using the GET HTTP verb and visiting the &lsquo;/&rsquo; page. If you are signing up for a website you are probably on a &lsquo;/signup&rsquo; page (or whatever name the website decides to use) and when you click the &lsquo;sign up&rsquo; button you are using either the POST or PUT HTTP verb. A POST verb will tell a web server that you are sending it data and are asking to make an update or insert into the database.</p>

<p>After we played with Sinatra I decided to update my applepicking website to use Sinatra and build a form of my own instead of cheating and using a google form. Part of the reason I used a google form was because I didn&rsquo;t know how to create a database on Heroku (a free website hosting service) but we covered how to do this while doing the Sinatra tutorial. While going over how to update my website with David, he showed me how to use a new site.gem/api called Stripe to allow users to pay for the applepicking trip while signing up using my site. How cool is that?! &lsquo;So cool, Kyle.&rsquo; Awe thanks anonymous reader. So basically my site can go from a clunky single page to a full fledged sign-up site this weekend. Boom its happening.</p>

<p>Today we are going to start building a web scraper. Web scrappers, also called web crawlers, move around websites on their own reading html text and navigating pages to pull useful information. I&rsquo;m really excited about this project because I actually had a plan for a website built around a web scrapper fetching university academic calendars and then aggregating then in one site. Be on the look out for springbreak.io, its gunna be big.</p>

<blockquote><p>springbreak.io, its gunna be big</p></blockquote>

<p>So thats the week. We also learned about the internet on Wednesday. I am going to try and write a full post about the internet (its a big deal) tomorrow to explain it to all my faithful we&#8217;blog&#8217; followers and to wrap my own head around it.</p>

<p>Cheers,
Kyle</p>

<p>P.S. I found out sublimetext2 has a spell check, all spelling mistakes are no longer forgivable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the wild west a.k.a 'week 2']]></title>
    <link href="http://kyle-dorman.github.io/blog/2013/09/27/the-wild-west-a-dot-k-a-week-2/"/>
    <updated>2013-09-27T10:17:00-04:00</updated>
    <id>http://kyle-dorman.github.io/blog/2013/09/27/the-wild-west-a-dot-k-a-week-2</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>metaprograming - .send.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;something meta this way comes&quot;</span> <span class="k">unless</span> <span class="n">hardcoded</span>
</span></code></pre></td></tr></table></div></figure>


<p>Week 2!
It might be easier to keep track of weeks than days. So lets say week 2(4) and leave it at that. Topics I want to talk about paired programming and meta programming.</p>

<p>Paired programming is popular programming style (maybe those arn&rsquo;t the right words) where two programmers work together on the same project using 1 computer. In paired programming 1 programmer writes tests they expect the program to pass and then the other programmer takes over an writes code to pass the test. This approach is called ping-pong or red-green programming. Programmers pass the keyboard back and forth, which is where the ping pong comes from. After the first programmer writes the test, all the tests are run and b/c the functionality in the program has not been written yet, the tests fail. Failed tests show up as red in the command prompt (*you have to set the tests to show colors). Then the second programmer writes the code to have the tests pass. Once the code is written the tests are run again and if the program has been written correctly, (sort of an arbitrary idea) the tests will pass. The functionality can then be changed, or &lsquo;refactored&rsquo;, to clean it up or just write it better. Having tests written out is really nice bevause it means that if your code changes you will always know if changing one small thing will effect anything else in your code. The ping-pong/red-green process continues until they have competed the project (or atleas thats what I think, but we&rsquo;ve only been doing 1-2 day projects).</p>

<p>The downsides of paired programming are obvious. A company could be paying two programmers to do the work of one and the better programmer can dominate the project while the other sits back and doesn&rsquo;t contribute. But the pros far outweigh the cons. My favorite benefit is that it forces eah person to vocalize what they are thinking. ften times I will have an inkling of what I should be doing and then dive into the project without fully fleshing out my idea. In paired programming you normally explain what you think you are about to write to the person you are working with before you write it. If my idea is only partly formed or has some falicy, it becomes obvious while I am speaking. Additioanlly, if I understand a concept, or rather think I understand a concept and my partner does not, I get to explain it to them and along the way learn a little bit more about the concept because I am trying to clearly explain it to someone else. The fli[p side of this is if I don;t understand something I have someone sitting next to me who is willing and able to explain things to me. Other things I benifit from are having a second person around to watch for syntax, typos and gramatical mistakes. Another important benefit which someone mentoned today is that diring paired programing, you can&rsquo;t really goof off. And to be honest, you don&rsquo;t feel the need to goof off nearly as much. Rather than just staring at a screen and feeling the constant need to check if ESPN posted another article about the NHL, I feel fully engaged in the problem I am sovling.</p>

<p>Overall, I feel like I have been the more experienced programmer in the 3 pairs I have been in. Even so, I don&rsquo;t think I would have completed the project much faster if at all, had I been working by myself. My partner has saved me from entering a fruitless rabbit hole many times. Also becasue someone is watching me type my code, I think I write much cleaner code. I used better variable names, space things out better and am more willing to write helper functions.</p>

<p>I&rsquo;m pretty sure where I used to work, does not use pair programming at all. I think they do do some type of testing (well ya, obviously they test things kyle) but not exactly the types of things we did here. I know the phrase &lsquo;acceptance criteria&rsquo; was passed around which seems similar to what we are doing in red-green testing, but I don&rsquo;t think use it as liberally as we did in our work.</p>

<p>Ok so thats paired programming.</p>

<p>meta programming:
is probably not the right phrase. but i like it. (also im going to stop capitalizing everything) . meta programming is basically programming code to write more code. it is understanding that whatever code you need may not exist yet but based on a few inputs, we know what functions we might want to create. some people find this very confusing but i love it. for me its just recognizing patterns. i think day-to-day it probably isnt used too often but the few times you need it, it can be super powerful. to me powerful means it can handle many different cases and hopefully cases you dont even conceptualize when you write the code.</p>

<p>im sort of we&#8217;blog&#8217;ed out for now.</p>

<p>oh one other thing I worked on this week was linking to the facebook api. that was fun. hard because my javascript skills are subpar but its comeing alont. i am trying to create a simple site where people can sign up with facebook. more to come</p>

<p>Cheers,
Kyle</p>

<p>P.S. Please forgive any grammatical or spelling mistakes</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[week 1 recap/reflection]]></title>
    <link href="http://kyle-dorman.github.io/blog/2013/09/20/week-1-recap-slash-reflection/"/>
    <updated>2013-09-20T09:34:00-04:00</updated>
    <id>http://kyle-dorman.github.io/blog/2013/09/20/week-1-recap-slash-reflection</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>e-mail of champions - API.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;look out APIs here I come!&quot;</span> <span class="k">unless</span> <span class="n">sn00d</span>
</span></code></pre></td></tr></table></div></figure>


<p>Day 5 / Day 20. Week one of Fullstack is almost over. Yesterday was a really fun day. We used pair programming for the first time. ALthough my ruby skills are probably better then most of the people here, I still found lots for benifits from paired programming. When I wasn&rsquo;t on the keyboard I had to vocalize what I thought we should do instead of typing it. This slowed my thiking process now and gave me a chance to catch some of my mistakes. It also made me explain why I thought we should do one method vs. another and vocalize what information we ahd and what we wanted to do with it. I also think that my typing is not amazing yet so not being on the computer let me continue to think instead of stopping and starting while I typed. Which is what I&rsquo;m doing now lol.</p>

<p>The API part was awesome. Defintely my first time really using an API and having some semblance of an idea why we took the steps we took. I&rsquo;d like to read over and API at sound point to understand what is really going on behind the scenes. I understand taking the API as is and not asking too many questions is generally benificial but on an general level I&rsquo;d like to understand what happens when we install a gem and then require the gem and then call the API class and its methods.</p>

<p>The day we did the Learn Ruby stuff felt slow to me. Apparently I had already done most of this stuff to prepare for the AppAcademy code interview, but I didn&rsquo;t realize it until I had gone through all the exercises. I did enjoy the Haiku stuff. I like those type of mind games. I think having some extra extra challenges would have been good. Then could have kept playing with my code more.</p>

<p>Yesterday I started writing a Sudoku solver. This was promted by Julian deciding to write a sudoku generator. I was thinking it through last night as I was falling asleep and I can definitly see pieces or groups that I am modeling and feel like using classes could benificial (right now I am using a complex array to keep track of everything) but still don&rsquo;t completly understand how to relate classes to each otehr and call each other&rsquo;s methods and all that jazz. *side note, that gsub! problem really shook my ruby confidence yesterday and now I keep doubting if I truly understand what I am updating. WHich is a good thing, but I definitly have questions and may be creating too many variables or may not be creating enough.</p>

<p>I am excited to get into javascript. Even after doing the prep courses on javascript I still only have a basic understanding of it but realize how powerful it is and how much fun I could be having with it. It sort of feels like ruby logic but with very visual and wuick results.</p>

<p>Ok thats all I got</p>

<p>Cheers,
Kyle</p>

<p>P.S. please forgive any spelling mistakes</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day18(3)]]></title>
    <link href="http://kyle-dorman.github.io/blog/2013/09/18/day18-2/"/>
    <updated>2013-09-18T09:12:00-04:00</updated>
    <id>http://kyle-dorman.github.io/blog/2013/09/18/day18-2</id>
    <content type="html"><![CDATA[<p><a href="http://kyle-dorman.github.io/">A link for links sake</a></p>

<figure class='code'><figcaption><span>breakfast of champions- bagel.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;chive is the best cream cheese&quot;</span> <span class="k">unless</span> <span class="n">lox</span> <span class="ow">and</span> <span class="n">tomato</span>
</span></code></pre></td></tr></table></div></figure>


<p>Day 18 baby! Biggest day of the class! &ldquo;But Kyle, its only day 3 of the class. How can today be both day 18 and &lsquo;the biggest day of the class?&rdquo; Well rude imaginary person, I started doing prep-wrk for this class on September 1, so thats how its day 18, silly. AND everyday is the biggest day of the class. Leggo.</p>

<p>Recap: Yesterday we bulit a blog. This blog. Blogs were origonally called weblogs. Some fancy person came along and decided to drop the &ldquo;we&rdquo; and now weblogs are called blogs. I might be a weblog guy myself. Not sure yet, but I&rsquo;ll get back to you when I know. This blog is cool because it is very customizable and everything in it uses code. To post stuff I have to send a git push request. To update visuals, I can update the html and css code. Fun stuff. Great for learning and for webloging. After we built a blog everyone int he class worked on ruby. I went through the <a href="http://testfirst.org/learn_ruby">Test First dot org</a> tutorial up through number 11 I think. I will do a few more this morning. I then built a haiku maker. We were given a file which had all the words in the dictionary and how to sound the words out which indicated how many sylabls(spelling) the word had. For this, I could randomly generate numbers which when paired together would give a haiku. Here is an example:</p>

<blockquote><p>SHAFTED WILLISON</p>

<p>PECH COLORISTIC TEACHING</p>

<p>ACCOMPANYING</p></blockquote>

<p>or this one:</p>

<blockquote><p>SIDLER HEAVEN&rsquo;S</p>

<p>PROPPED WATNE COIN UNGAR THIEDE FUNES</p>

<p>TESTICLES BEGINS</p></blockquote>

<p>Future: Today I will write a script with will find all the haikus in a book. And also finish the <em>Test First</em> stuff.</p>

<p>Thats all for now. Send me a youtube video and I&rsquo;ll try to post it.</p>

<p>Cheers,
Kyle</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://kyle-dorman.github.io/blog/2013/09/17/first-post/"/>
    <updated>2013-09-17T11:21:00-04:00</updated>
    <id>http://kyle-dorman.github.io/blog/2013/09/17/first-post</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>I am a secret n00b- sn00b.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello World!&quot;</span> <span class="k">if</span> <span class="n">sn00b</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is my first blog post. Why is Markup so easy. Its like you don&rsquo;t have to use any code at all. Very interesting.</p>

<blockquote><p>&ldquo;Very Interesting&rdquo; &ndash; Kyle Dorman</p></blockquote>

<p>And now I am typing more things. Maybe I will write a real blog post later.</p>

<!-- more -->


<p>This is fun because I get to use git to post it and wrtie it in sublime text 2 &copy;.</p>

<p><a href="https://www.youtube.com/watch?v=CSmfX6cKoIc"><img src="HTTP://img.youtube.com/vi/CSmfX6cKoIc/0.jpg" alt="TEXXXXT" /></a></p>

<p>Cheers,
Kyle</p>
]]></content>
  </entry>
  
</feed>
