<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[a 'we'blog]]></title>
  <link href="http://kyle-dorman.github.io/atom.xml" rel="self"/>
  <link href="http://kyle-dorman.github.io/"/>
  <updated>2013-09-27T13:18:06-04:00</updated>
  <id>http://kyle-dorman.github.io/</id>
  <author>
    <name><![CDATA[Kyle Dorman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[the wild west a.k.a 'week 2']]></title>
    <link href="http://kyle-dorman.github.io/blog/2013/09/27/the-wild-west-a-dot-k-a-week-2/"/>
    <updated>2013-09-27T10:17:00-04:00</updated>
    <id>http://kyle-dorman.github.io/blog/2013/09/27/the-wild-west-a-dot-k-a-week-2</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>metaprograming - .send.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;something meta this way comes&quot;</span> <span class="k">unless</span> <span class="n">hardcoded</span>
</span></code></pre></td></tr></table></div></figure>


<p>Week 2!
It might be easier to keep track of weeks than days. So lets say week 2(4) and leave it at that. Topics I want to talk about paired programming and meta programming.</p>

<p>Paired programming is popular programming style (maybe those arn&rsquo;t the right words) where two programmers work together on the same project using 1 computer. In paired programming 1 programmer writes tests they expect the program to pass and then the other programmer takes over an writes code to pass the test. This approach is called ping-pong or red-green programming. Programmers pass the keyboard back and forth, which is where the ping pong comes from. After the first programmer writes the test, all the tests are run and b/c the functionality in the program has not been written yet, the tests fail. Failed tests show up as red in the command prompt (*you have to set the tests to show colors). Then the second programmer writes the code to have the tests pass. Once the code is written the tests are run again and if the program has been written correctly, (sort of an arbitrary idea) the tests will pass. The functionality can then be changed, or &lsquo;refactored&rsquo;, to clean it up or just write it better. Having tests written out is really nice bevause it means that if your code changes you will always know if changing one small thing will effect anything else in your code. The ping-pong/red-green process continues until they have competed the project (or atleas thats what I think, but we&rsquo;ve only been doing 1-2 day projects).</p>

<p>The downsides of paired programming are obvious. A company could be paying two programmers to do the work of one and the better programmer can dominate the project while the other sits back and doesn&rsquo;t contribute. But the pros far outweigh the cons. My favorite benefit is that it forces eah person to vocalize what they are thinking. ften times I will have an inkling of what I should be doing and then dive into the project without fully fleshing out my idea. In paired programming you normally explain what you think you are about to write to the person you are working with before you write it. If my idea is only partly formed or has some falicy, it becomes obvious while I am speaking. Additioanlly, if I understand a concept, or rather think I understand a concept and my partner does not, I get to explain it to them and along the way learn a little bit more about the concept because I am trying to clearly explain it to someone else. The fli[p side of this is if I don;t understand something I have someone sitting next to me who is willing and able to explain things to me. Other things I benifit from are having a second person around to watch for syntax, typos and gramatical mistakes. Another important benefit which someone mentoned today is that diring paired programing, you can&rsquo;t really goof off. And to be honest, you don&rsquo;t feel the need to goof off nearly as much. Rather than just staring at a screen and feeling the constant need to check if ESPN posted another article about the NHL, I feel fully engaged in the problem I am sovling.</p>

<p>Overall, I feel like I have been the more experienced programmer in the 3 pairs I have been in. Even so, I don&rsquo;t think I would have completed the project much faster if at all, had I been working by myself. My partner has saved me from entering a fruitless rabbit hole many times. Also becasue someone is watching me type my code, I think I write much cleaner code. I used better variable names, space things out better and am more willing to write helper functions.</p>

<p>I&rsquo;m pretty sure EnerNOC, where I used to work, does not use pair programming at all. I think they do do some type of testing (well ya, obviously they test things kyle) but not exactly the types of things we did here. I know the phrase &lsquo;acceptance criteria&rsquo; was passed around which seems similar to what we are doing in red-green testing, but I don&rsquo;t think use it as liberally as we did in our work.</p>

<p>Ok so thats paired programming.</p>

<p>meta programming:
is probably not the right phrase. but i like it. (also im going to stop capitalizing everything) . meta programming is basically programming code to write more code. it is understanding that whatever code you need may not exist yet but based on a few inputs, we know what functions we might want to create. some people find this very confusing but i love it. for me its just recognizing patterns. i think day-to-day it probably isnt used too often but the few times you need it, it can be super powerful. to me powerful means it can handle many different cases and hopefully cases you dont even conceptualize when you write the code.</p>

<p>im sort of we&#8217;blog&#8217;ed out for now.</p>

<p>oh one other thing I worked on this week was linking to the facebook api. that was fun. hard because my javascript skills are subpar but its comeing alont. i am trying to create a simple site where people can sign up with facebook. more to come</p>

<p>Cheers,
Kyle</p>

<p>P.S. Please forgive any grammatical or spelling mistakes</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[week 1 recap/reflection]]></title>
    <link href="http://kyle-dorman.github.io/blog/2013/09/20/week-1-recap-slash-reflection/"/>
    <updated>2013-09-20T09:34:00-04:00</updated>
    <id>http://kyle-dorman.github.io/blog/2013/09/20/week-1-recap-slash-reflection</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>e-mail of champions - API.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;look out APIs here I come!&quot;</span> <span class="k">unless</span> <span class="n">sn00d</span>
</span></code></pre></td></tr></table></div></figure>


<p>Day 5 / Day 20. Week one of Fullstack is almost over. Yesterday was a really fun day. We used pair programming for the first time. ALthough my ruby skills are probably better then most of the people here, I still found lots for benifits from paired programming. When I wasn&rsquo;t on the keyboard I had to vocalize what I thought we should do instead of typing it. This slowed my thiking process now and gave me a chance to catch some of my mistakes. It also made me explain why I thought we should do one method vs. another and vocalize what information we ahd and what we wanted to do with it. I also think that my typing is not amazing yet so not being on the computer let me continue to think instead of stopping and starting while I typed. Which is what I&rsquo;m doing now lol.</p>

<p>The API part was awesome. Defintely my first time really using an API and having some semblance of an idea why we took the steps we took. I&rsquo;d like to read over and API at sound point to understand what is really going on behind the scenes. I understand taking the API as is and not asking too many questions is generally benificial but on an general level I&rsquo;d like to understand what happens when we install a gem and then require the gem and then call the API class and its methods.</p>

<p>The day we did the Learn Ruby stuff felt slow to me. Apparently I had already done most of this stuff to prepare for the AppAcademy code interview, but I didn&rsquo;t realize it until I had gone through all the exercises. I did enjoy the Haiku stuff. I like those type of mind games. I think having some extra extra challenges would have been good. Then could have kept playing with my code more.</p>

<p>Yesterday I started writing a Sudoku solver. This was promted by Julian deciding to write a sudoku generator. I was thinking it through last night as I was falling asleep and I can definitly see pieces or groups that I am modeling and feel like using classes could benificial (right now I am using a complex array to keep track of everything) but still don&rsquo;t completly understand how to relate classes to each otehr and call each other&rsquo;s methods and all that jazz. *side note, that gsub! problem really shook my ruby confidence yesterday and now I keep doubting if I truly understand what I am updating. WHich is a good thing, but I definitly have questions and may be creating too many variables or may not be creating enough.</p>

<p>I am excited to get into javascript. Even after doing the prep courses on javascript I still only have a basic understanding of it but realize how powerful it is and how much fun I could be having with it. It sort of feels like ruby logic but with very visual and wuick results.</p>

<p>Ok thats all I got</p>

<p>Cheers,
Kyle</p>

<p>P.S. please forgive any spelling mistakes</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day18(3)]]></title>
    <link href="http://kyle-dorman.github.io/blog/2013/09/18/day18-2/"/>
    <updated>2013-09-18T09:12:00-04:00</updated>
    <id>http://kyle-dorman.github.io/blog/2013/09/18/day18-2</id>
    <content type="html"><![CDATA[<p><a href="http://kyle-dorman.github.io/">A link for links sake</a></p>

<figure class='code'><figcaption><span>breakfast of champions- bagel.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;chive is the best cream cheese&quot;</span> <span class="k">unless</span> <span class="n">lox</span> <span class="ow">and</span> <span class="n">tomato</span>
</span></code></pre></td></tr></table></div></figure>


<p>Day 18 baby! Biggest day of the class! &ldquo;But Kyle, its only day 3 of the class. How can today be both day 18 and &lsquo;the biggest day of the class?&rdquo; Well rude imaginary person, I started doing prep-wrk for this class on September 1, so thats how its day 18, silly. AND everyday is the biggest day of the class. Leggo.</p>

<p>Recap: Yesterday we bulit a blog. This blog. Blogs were origonally called weblogs. Some fancy person came along and decided to drop the &ldquo;we&rdquo; and now weblogs are called blogs. I might be a weblog guy myself. Not sure yet, but I&rsquo;ll get back to you when I know. This blog is cool because it is very customizable and everything in it uses code. To post stuff I have to send a git push request. To update visuals, I can update the html and css code. Fun stuff. Great for learning and for webloging. After we built a blog everyone int he class worked on ruby. I went through the <a href="http://testfirst.org/learn_ruby">Test First dot org</a> tutorial up through number 11 I think. I will do a few more this morning. I then built a haiku maker. We were given a file which had all the words in the dictionary and how to sound the words out which indicated how many sylabls(spelling) the word had. For this, I could randomly generate numbers which when paired together would give a haiku. Here is an example:</p>

<blockquote><p>SHAFTED WILLISON</p>

<p>PECH COLORISTIC TEACHING</p>

<p>ACCOMPANYING</p></blockquote>

<p>or this one:</p>

<blockquote><p>SIDLER HEAVEN&rsquo;S</p>

<p>PROPPED WATNE COIN UNGAR THIEDE FUNES</p>

<p>TESTICLES BEGINS</p></blockquote>

<p>Future: Today I will write a script with will find all the haikus in a book. And also finish the <em>Test First</em> stuff.</p>

<p>Thats all for now. Send me a youtube video and I&rsquo;ll try to post it.</p>

<p>Cheers,
Kyle</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://kyle-dorman.github.io/blog/2013/09/17/first-post/"/>
    <updated>2013-09-17T11:21:00-04:00</updated>
    <id>http://kyle-dorman.github.io/blog/2013/09/17/first-post</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>I am a secret n00b- sn00b.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello World!&quot;</span> <span class="k">if</span> <span class="n">sn00b</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is my first blog post. Why is Markup so easy. Its like you don&rsquo;t have to use any code at all. Very interesting.</p>

<blockquote><p>&ldquo;Very Interesting&rdquo; &ndash; Kyle Dorman</p></blockquote>

<p>And now I am typing more things. Maybe I will write a real blog post later.</p>

<!-- more -->


<p>This is fun because I get to use git to post it and wrtie it in sublime text 2 &copy;.</p>

<p><a href="https://www.youtube.com/watch?v=CSmfX6cKoIc"><img src="HTTP://img.youtube.com/vi/CSmfX6cKoIc/0.jpg" alt="TEXXXXT" /></a></p>

<p>Cheers,
Kyle</p>
]]></content>
  </entry>
  
</feed>
